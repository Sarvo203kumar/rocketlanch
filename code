interface RocketState {
    void startChecks(Rocket rocket);
    void launch(Rocket rocket);
    void fastForward(Rocket rocket, int seconds);
}

class PreLaunch implements RocketState {
    @Override
    public void startChecks(Rocket rocket) {
        System.out.println("All systems are 'Go' for launch.");
        rocket.setState(new Stage1());
    }

    @Override
    public void launch(Rocket rocket) {
        System.out.println("Cannot launch. Pre-launch checks not complete.");
    }

    @Override
    public void fastForward(Rocket rocket, int seconds) {
        System.out.println("Cannot fast forward. Rocket is in pre-launch state.");
    }
}

class Stage1 implements RocketState {
    @Override
    public void startChecks(Rocket rocket) {
        System.out.println("Pre-launch checks already complete.");
    }

    @Override
    public void launch(Rocket rocket) {
        System.out.println("Launching...");
        rocket.update(1);
    }

    @Override
    public void fastForward(Rocket rocket, int seconds) {
        for (int i = 0; i < seconds; i++) {
            rocket.update(1);
            if (rocket.getFuel() <= 0) {
                System.out.println("Mission Failed due to insufficient fuel.");
                return;
            }
        }
    }
}

class Stage2 implements RocketState {
    @Override
    public void startChecks(Rocket rocket) {
        System.out.println("Pre-launch checks already complete.");
    }

    @Override
    public void launch(Rocket rocket) {
        System.out.println("Rocket is already launched.");
    }

    @Override
    public void fastForward(Rocket rocket, int seconds) {
        for (int i = 0; i < seconds; i++) {
            rocket.update(2);
            if (rocket.getFuel() <= 0) {
                System.out.println("Mission Failed due to insufficient fuel.");
                return;
            }
            if (rocket.getAltitude() >= 100) {
                rocket.setState(new Orbit());
                System.out.println("Orbit achieved! Mission Successful.");
                return;
            }
        }
    }
}

class Orbit implements RocketState {
    @Override
    public void startChecks(Rocket rocket) {
        System.out.println("Rocket is already in orbit.");
    }

    @Override
    public void launch(Rocket rocket) {
        System.out.println("Rocket is already in orbit.");
    }

    @Override
    public void fastForward(Rocket rocket, int seconds) {
        System.out.println("Rocket is already in orbit.");
    }
}
